{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["RegisterSchema","Yup","shape","name","min","max","required","password","matches","email","test","value","ms","Promise","resolve","setTimeout","then","includes","acceptTAC","validate","values","errors","passwordMatch","App","className","initialValues","onSubmit","setSubmitting","validateOnChange","validationSchema","handleSubmit","handleChange","isSubmitting","isValid","type","onChange","disabled","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAQMA,G,OAAiBC,MAAaC,MAAM,CACpCC,KAAMF,MACDG,IAAI,EAAG,uBACPC,IAAI,GAAI,sBACRC,SAAS,YACdC,SAAUN,MACLG,IAAI,EAAG,uBACPE,SAAS,YACTE,QAAQ,iCAAkC,0DAC/CC,MAAOR,MACFQ,MAAM,wBACNH,SAAS,YACTI,KAAK,eAAgB,6BAA6B,SAACC,GAClD,OAfEC,EAeW,IAfL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAejCI,MAAK,WACrB,MAAI,CAAC,kBAAmB,kBAAmB,yBAA0B,mBAAoB,0BAA0BC,SAASN,GACnHE,QAAQC,SAAQ,GAEhBD,QAAQC,SAAQ,MAnBzB,IAAAF,KAuBRM,UAAWjB,MACNS,KAAK,eAAgB,4BAA4B,SAACC,GAAD,QAAaA,QAInEQ,EAAW,SAACC,GAChB,IAAIC,EAAS,GAMb,OAJID,EAAOb,WAAaa,EAAOE,gBAC7BD,EAAOC,cAAgB,wBAGlBD,GAkEME,E,uKA5DX,OACI,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CACIC,cAAe,CACbtB,KAAM,GACNI,SAAU,GACVe,cAAe,GACfb,MAAO,GACPS,WAAW,GAEbC,SAAUA,EACVO,SAAU,SAACN,EAAD,GAAgC,IAArBO,EAAoB,EAApBA,cACnBZ,YAAW,WACTY,GAAc,KACb,MAELC,kBAAkB,EAClBC,iBAAkB7B,EAftB,SAiBG,gBACG8B,EADH,EACGA,aACAC,EAFH,EAEGA,aACAC,EAHH,EAGGA,aACAC,EAJH,EAIGA,QAJH,OAMG,uBAAMP,SAAUI,EAAhB,UACE,0CAEQ,uBACR,cAAC,IAAD,CAAOI,KAAK,OAAO/B,KAAK,OACjBgC,SAAUJ,IAAgB,cAAC,IAAD,CAAc5B,KAAK,SAAQ,uBAC5D,8CAEQ,uBACR,cAAC,IAAD,CAAO+B,KAAK,WAAW/B,KAAK,WACrBgC,SAAUJ,IAAgB,cAAC,IAAD,CAAc5B,KAAK,aAAY,uBAChE,oDAEQ,uBACR,cAAC,IAAD,CAAO+B,KAAK,WAAW/B,KAAK,gBACrBgC,SAAUJ,IAAgB,cAAC,IAAD,CAAc5B,KAAK,kBAAiB,uBACrE,2CAEQ,uBACR,cAAC,IAAD,CAAO+B,KAAK,QAAQ/B,KAAK,QAClBgC,SAAUJ,IAAgB,cAAC,IAAD,CAAc5B,KAAK,UAAS,uBAC7D,iEAGA,cAAC,IAAD,CAAO+B,KAAK,WAAW/B,KAAK,YACrBgC,SAAUJ,IAAgB,cAAC,IAAD,CAAc5B,KAAK,cAAa,uBAAK,uBACtE,uBAAO+B,KAAK,SAASvB,MAAM,WAAWyB,SAAUJ,IAAiBC,gB,GAtDjEI,aChCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.df7754c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport './App.css';\n\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst RegisterSchema = Yup.object().shape({\n      name: Yup.string()\n          .min(6, 'Username too short!')\n          .max(24, 'Username too long!')\n          .required('Required'),\n      password: Yup.string()\n          .min(8, 'Password too short!')\n          .required('Required')\n          .matches(/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, 'At least one lowercase and one uppercase char required'),\n      email: Yup.string()\n          .email('Valid Email required')\n          .required('Required')\n          .test('Email unique', 'Email already registered!', (value) => {\n            return sleep(200).then(() => {\n              if (['vganesh@mac.com', 'guialbu@msn.com', 'nasarius@optonline.net', 'scato@icloud.com', 'dwheeler@optonline.net'].includes(value)) {\n                return Promise.resolve(false);\n              } else {\n                return Promise.resolve(true);\n              }\n            })\n          }),\n      acceptTAC: Yup.boolean()\n          .test('TAC Accepted', 'TAC needs to be accepted', (value) => !!value)\n    }\n);\n\nconst validate = (values) => {\n  let errors = {};\n\n  if (values.password !== values.passwordMatch) {\n    errors.passwordMatch = 'Passwords must match';\n  }\n\n  return errors;\n};\n\nclass App extends Component {\n\n  render() {\n    return (\n        <div className=\"App\">\n          <Formik\n              initialValues={{\n                name: '',\n                password: '',\n                passwordMatch: '',\n                email: '',\n                acceptTAC: false\n              }}\n              validate={validate}\n              onSubmit={(values, { setSubmitting }) => {\n                setTimeout(() => {\n                  setSubmitting(false);\n                }, 200);\n              }}\n              validateOnChange={false}\n              validationSchema={RegisterSchema}\n          >\n            {({\n                handleSubmit,\n                handleChange,\n                isSubmitting,\n                isValid,\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <label>\n                    Name:\n                  </label><br/>\n                  <Field type=\"text\" name=\"name\"\n                         onChange={handleChange} /><ErrorMessage name=\"name\"/><br/>\n                  <label>\n                    Password:\n                  </label><br/>\n                  <Field type=\"password\" name=\"password\"\n                         onChange={handleChange} /><ErrorMessage name=\"password\"/><br/>\n                  <label>\n                    Password Match:\n                  </label><br/>\n                  <Field type=\"password\" name=\"passwordMatch\"\n                         onChange={handleChange} /><ErrorMessage name=\"passwordMatch\"/><br/>\n                  <label>\n                    Email:\n                  </label><br/>\n                  <Field type=\"email\" name=\"email\"\n                         onChange={handleChange} /><ErrorMessage name=\"email\"/><br/>\n                  <label>\n                    Accept Terms and Conditions:\n                  </label>\n                  <Field type=\"checkbox\" name=\"acceptTAC\"\n                         onChange={handleChange} /><ErrorMessage name=\"acceptTAC\"/><br/><br/>\n                  <input type=\"submit\" value=\"Register\" disabled={isSubmitting && !isValid}/>\n                </form>\n            )}\n          </Formik>\n        </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}